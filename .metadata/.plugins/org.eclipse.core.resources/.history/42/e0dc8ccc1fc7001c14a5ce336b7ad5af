package Group1.MyShell.grabJsonToSqlDatabase;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import org.json.JSONArray;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import Group1.MyShell.MVC.model.CryptocurrencyBean;

public class grabJsonToSqlDatabase {
	public static void main(String[] args) throws IOException {
		String day = "17";
		String TWD_filePath = "C:\\Json\\TWD\\2022-04-"+day+".txt";
		String USD_filePath = "C:\\Json\\USD\\2022-04-"+day+".txt";
		String CYN_filePath = "C:\\Json\\CNY\\2022-04-"+day+".txt";
		String JPY_filePath = "C:\\Json\\JPY\\2022-04-"+day+".txt";
		String EUR_filePath = "C:\\Json\\EUR\\2022-04-"+day+".txt";
		
		String fileContent;
		
		FileReader TWDfile = new FileReader(TWD_filePath);
		FileReader USDfile = new FileReader(USD_filePath);
		FileReader CYNfile = new FileReader(CYN_filePath);
		FileReader JPYfile = new FileReader(JPY_filePath);
		FileReader EURfile = new FileReader(EUR_filePath);
		
		BufferedReader TWDbr = new BufferedReader(TWDfile);
		BufferedReader USDbr = new BufferedReader(USDfile);
		BufferedReader CNYbr = new BufferedReader(CYNfile);
		BufferedReader JPYbr = new BufferedReader(JPYfile);
		BufferedReader EURbr = new BufferedReader(EURfile);
		
		StringBuffer TWDsr = new StringBuffer();
		StringBuffer USDsr = new StringBuffer();
		StringBuffer CYNsr = new StringBuffer();
		StringBuffer JPYsr = new StringBuffer();
		StringBuffer EURsr = new StringBuffer();

		while ((fileContent = TWDbr.readLine()) != null) {
			TWDsr.append(fileContent);
		}
		while ((fileContent = USDbr.readLine()) != null) {
			USDsr.append(fileContent);
		}
		while ((fileContent = CNYbr.readLine()) != null) {
			CYNsr.append(fileContent);
		}
		while ((fileContent = JPYbr.readLine()) != null) {
			JPYsr.append(fileContent);
		}
		while ((fileContent = EURbr.readLine()) != null) {
			EURsr.append(fileContent);
		}

		ObjectMapper mapper = new ObjectMapper();
		JsonNode TWDnode = mapper.readTree(TWDsr.toString());
		JsonNode USDnode = mapper.readTree(USDsr.toString());
		JsonNode CYNnode = mapper.readTree(CYNsr.toString());
		JsonNode JPYnode = mapper.readTree(JPYsr.toString());
		JsonNode EURnode = mapper.readTree(EURsr.toString());
		
		String data = TWDnode.get("data").toString();

		JSONArray jArray = new JSONArray(data);
		for (int i = 0; i < jArray.length(); i++) {
			CryptocurrencyBean crypto = new CryptocurrencyBean();
			String date = TWDnode.get("status").get("timestamp").asText().substring(0, 10);
			String nameOfCryptocurrency = TWDnode.get("data").get(i).get("name").asText();
			String symbolOfCryptocurrency = TWDnode.get("data").get(i).get("symbol").asText();
			String slugOfCryptocurrency = TWDnode.get("data").get(i).get("slug").asText();
			int maxSupply = TWDnode.get("data").get(i).get("max_supply").asInt();
			int circulatingSupply = TWDnode.get("data").get(i).get("circulating_supply").asInt();
			double percentChange1h = TWDnode.get("data").get(i).get("quote").get("TWD").get("percent_change_1h").asDouble();
			double percentChange24h = TWDnode.get("data").get(i).get("quote").get("TWD").get("percent_change_24h").asDouble();
			double percentChange7d = TWDnode.get("data").get(i).get("quote").get("TWD").get("percent_change_7d").asDouble();
			double percentChange30d = TWDnode.get("data").get(i).get("quote").get("TWD").get("percent_change_30d").asDouble();
			double percentChange60d = TWDnode.get("data").get(i).get("quote").get("TWD").get("percent_change_60d").asDouble();
			double percentChange90d = TWDnode.get("data").get(i).get("quote").get("TWD").get("percent_change_90d").asDouble();
			
			double TWDpriceOfCryptocurrency = TWDnode.get("data").get(i).get("quote").get("TWD").get("price").asDouble();
			double TWDmarketCap = TWDnode.get("data").get(i).get("quote").get("TWD").get("market_cap").asDouble();
			double TWDfullyDilutedMarketCap = TWDnode.get("data").get(i).get("quote").get("TWD").get("fully_diluted_market_cap").asDouble();
			
			double USDpriceOfCryptocurrency = USDnode.get("data").get(i).get("quote").get("USD").get("price").asDouble();
			double USDmarketCap = USDnode.get("data").get(i).get("quote").get("USD").get("market_cap").asDouble();
			double USDfullyDilutedMarketCap = USDnode.get("data").get(i).get("quote").get("USD").get("fully_diluted_market_cap").asDouble();
			
			double CNYpriceOfCryptocurrency = USDnode.get("data").get(i).get("quote").get("CNY").get("price").asDouble();
			double CNYmarketCap = USDnode.get("data").get(i).get("quote").get("CNY").get("market_cap").asDouble();
			double CNYfullyDilutedMarketCap = USDnode.get("data").get(i).get("quote").get("CNY").get("fully_diluted_market_cap").asDouble();
			
			double JPYpriceOfCryptocurrency = USDnode.get("data").get(i).get("quote").get("JPY").get("price").asDouble();
			double JPYmarketCap = USDnode.get("data").get(i).get("quote").get("JPY").get("market_cap").asDouble();
			double JPYfullyDilutedMarketCap = USDnode.get("data").get(i).get("quote").get("JPY").get("fully_diluted_market_cap").asDouble();
			
			double EURpriceOfCryptocurrency = USDnode.get("data").get(i).get("quote").get("EUR").get("price").asDouble();
			double EURmarketCap = USDnode.get("data").get(i).get("quote").get("EUR").get("market_cap").asDouble();
			double EURfullyDilutedMarketCap = USDnode.get("data").get(i).get("quote").get("EUR").get("fully_diluted_market_cap").asDouble();
			
			
			
			crypto.setDate(date);
			crypto.setNameOfCryptocurrency(nameOfCryptocurrency);
			System.out.println(crypto);
		}
	}

}
